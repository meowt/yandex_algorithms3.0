package main

import (
	"fmt"
)

//6. Операционные системы lite
//Ограничение времени	1 секунда
//Ограничение памяти	64Mb
//Ввод	стандартный ввод или input.txt
//Вывод	стандартный вывод или output.txt
//Васин жесткий диск состоит из M секторов. Вася последовательно устанавливал на него различные операционные системы следующим методом: он создавал новый раздел диска из последовательных секторов, начиная с сектора номер ai и до сектора bi включительно, и устанавливал на него очередную систему. При этом, если очередной раздел хотя бы по одному сектору пересекается с каким-то ранее созданным разделом, то ранее созданный раздел «затирается», и операционная система, которая на него была установлена, больше не может быть загружена.
//
//Напишите программу, которая по информации о том, какие разделы на диске создавал Вася, определит, сколько в итоге работоспособных операционных систем установлено и работает в настоящий момент на Васином компьютере.
//
//Формат ввода
//Сначала вводятся натуральное число M — количество секторов на жестком диске (1 ≤ M ≤ 109) и целое число N — количество разделов, которое последовательно создавал Вася (0 ≤ N ≤ 1000).
//
//Далее идут N пар чисел ai и bi, задающих номера начального и конечного секторов раздела (1 ≤ ai ≤ bi ≤ M).
//
//Формат вывода
//Выведите одно число — количество работающих операционных систем на Васином компьютере.

func main() {
	var m, n, tempA, tempB int
	var squareSlc []int
	fmt.Scan(&m)
	fmt.Scan(&n)
	for i := 0; i < n; i++ {
		fmt.Scan(&tempA, &tempB)
		squareSlc = append(squareSlc, tempA, tempB)
	}
	if squareSlc == nil {
		fmt.Println(0)
		return
	}
	calc(squareSlc)
}

func calc(slc []int) {
	res := len(slc) / 2
	var a, b, a2, b2 int
	var removedSlc []int

	for i := len(slc) - 1; i > 0; {
		for ignr := range removedSlc {
			if i == ignr {
				goto label1
			}
		}
		a, b = slc[i-1], slc[i]

		for j := i - 2; j > 0; {
			for ignr := range removedSlc {
				if j == ignr {
					goto labelJ
				}
			}
			//fmt.Printf("j = %v, %v\n", j, slc[j])
			a2, b2 = slc[j-1], slc[j]

			if (a2 <= a && a <= b2) || (a2 <= b && b <= b2) {
				res--
				removedSlc = append(removedSlc, j)
			}
		labelJ:
			j -= 2
		}
	label1:
		i -= 2
	}
	fmt.Println(res)
}

package main

import "fmt"

//28. Ход конём
//Ограничение времени	1 секунда
//Ограничение памяти	64Mb
//Ввод	стандартный ввод или input.txt
//Вывод	стандартный вывод или output.txt
//Дана прямоугольная доска N × M (N строк и M столбцов). В левом верхнем углу находится шахматный конь, которого необходимо переместить в правый нижний угол доски. В данной задаче конь может перемещаться на две клетки вниз и одну клетку вправо или на одну клетку вниз и две клетки вправо.
//
//Необходимо определить, сколько существует различных маршрутов, ведущих из левого верхнего в правый нижний угол.
//
//Формат ввода
//Входной файл содержит два натуральных числа N и M (1 ≤ N, M ≤ 50)
//
//Формат вывода
//В выходной файл выведите единственное число — количество способов добраться конём до правого нижнего угла доски.

func main() {
	var n, m int
	fmt.Scan(&n, &m)

	matrix := makeMatrix(n, m)
	fmt.Println(f(matrix))
}

func f(matrix [][]int) int {
	for i := 2; i < len(matrix); i++ {
		for j := 2; j < len(matrix[0]); j++ {
			matrix[i][j] = matrix[i-1][j-2] + matrix[i-2][j-1]
		}
	}
	return matrix[len(matrix)-1][len(matrix[0])-1]
}

func makeMatrix(n, m int) [][]int {
	n++
	m++
	matrix := make([][]int, n)
	for i := 0; i < n; i++ {
		matrix[i] = make([]int, m)
	}
	matrix[1][1] = 1
	return matrix
}

package main

import (
	"fmt"
	"math"
)

//26. Самый дешевый путь
//Ограничение времени	1 секунда
//Ограничение памяти	256Mb
//Ввод	стандартный ввод или input.txt
//Вывод	стандартный вывод или output.txt
//В каждой клетке прямоугольной таблицы N × M
// записано некоторое число. Изначально игрок находится в левой верхней клетке. За один ход ему разрешается перемещаться в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено). При проходе через клетку с игрока берут столько килограммов еды, какое число записано в этой клетке (еду берут также за первую и последнюю клетки его пути).
//Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний угол.
//
//Формат ввода
//Вводятся два числа N и M — размеры таблицы ( 1 ≤ N ≤ 20, 1 ≤ M ≤ 20 ).
//Затем идет N строк по M чисел в каждой — размеры штрафов в килограммах за прохождение через соответствующие клетки (числа от 0 до 100).
//
//Формат вывода
//Выведите минимальный вес еды в килограммах, отдав которую можно попасть в правый нижний угол.

func main() {
	var n, m int
	fmt.Scan(&n, &m)

	matrix := makeMatrix(n, m)

	fmt.Println(f(matrix))
}

func f(matrix [][]int) int {
	for i := 1; i < len(matrix); i++ {
		for j := 1; j < len(matrix[0]); j++ {
			if i == 1 && j == 1 {
				continue
			}
			matrix[i][j] += min(matrix[i-1][j], matrix[i][j-1])
		}
	}
	return matrix[len(matrix)-1][len(matrix[0])-1]
}

func min(a, b int) (res int) {
	return int(math.Min(float64(a), float64(b)))
}

func makeMatrix(n, m int) [][]int {
	n++
	m++
	matrix := make([][]int, n)
	for i := 0; i < n; i++ {
		matrix[i] = make([]int, m)
	}
	for i := 0; i < m; i++ {
		matrix[0][i] = 40001
	}
	for i := 1; i < n; i++ {
		matrix[i][0] = 40001
	}
	for i := 1; i < n; i++ {
		for j := 1; j < m; j++ {
			fmt.Scan(&matrix[i][j])
		}
	}
	return matrix
}
